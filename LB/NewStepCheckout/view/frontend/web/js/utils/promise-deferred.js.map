{"version":3,"sources":["../../ts/js/utils/promise-deferred.ts"],"names":["deferred","resolve","reject","promise","Promise","promiseResolve","promiseReject"],"mappings":";;;AAAA;;;;;;AAMe,WAASA,QAAT,GAAuC;AAClD,QAAIC,OAAJ;AACA,QAAIC,MAAJ;AACA,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,cAAD,EAA6BC,aAA7B,EAA2D;AACnFL,MAAAA,OAAO,GAAGI,cAAV;AACAH,MAAAA,MAAM,GAAGI,aAAT;AACH,KAHe,CAAhB;AAIA,WAAO;AAAEL,MAAAA,OAAO,EAAPA,OAAF;AAAWC,MAAAA,MAAM,EAANA,MAAX;AAAmBC,MAAAA,OAAO,EAAPA;AAAnB,KAAP;AACH","sourcesContent":["/**\n * Returns a deferred promise\n *\n * @returns {DeferredInterface}\n * @api\n */\nexport default function deferred(): DeferredInterface {\n    let resolve: () => void;\n    let reject: () => void;\n    const promise = new Promise((promiseResolve: () => void, promiseReject: () => void) => {\n        resolve = promiseResolve;\n        reject = promiseReject;\n    });\n    return { resolve, reject, promise };\n}\n\nexport interface DeferredInterface {\n    resolve: (...args: any[]) => void;\n    reject: (...args: any[]) => void;\n    promise: Promise<{}>;\n}\n"],"file":"promise-deferred.js"}