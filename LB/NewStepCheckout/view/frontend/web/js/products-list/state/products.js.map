{"version":3,"sources":["../../../ts/js/products-list/state/products.ts"],"names":["ProductsState","lazyProducts","setLazyProducts","products","getLazyProducts","getInstance","instance"],"mappings":";;;MAGqBA,a;;;;WAGTC,Y,GAAwC,E;;;;;AAEhD;;;WAGOC,e,GAAP,yBAAuBC,QAAvB,EAA4C;AACxC,WAAKF,YAAL,GAAoBE,QAApB;AACH;AAED;;;;;WAGOC,e,GAAP,2BAAkD;AAC9C,aAAO,KAAKH,YAAZ;AACH;AAED;;;;;kBAGOI,W,GAAP,uBAAoC;AAChC,UAAI,CAACL,aAAa,CAACM,QAAnB,EAA6B;AACzBN,QAAAA,aAAa,CAACM,QAAd,GAAyB,IAAIN,aAAJ,EAAzB;AACH;;AAED,aAAOA,aAAa,CAACM,QAArB;AACH,K","sourcesContent":["import {ProductStateInterface} from \"../types/state.types\";\nimport ProductTypesInterface from \"../types/product.types\";\n\nexport default class ProductsState implements ProductStateInterface\n{\n    private static instance: ProductsState;\n    private lazyProducts: ProductTypesInterface[] = [];\n\n    /**\n     * @inheritdoc\n     */\n    public setLazyProducts(products: any): void {\n        this.lazyProducts = products\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getLazyProducts(): ProductTypesInterface[] {\n        return this.lazyProducts\n    }\n\n    /**\n     * Get state in singleton pattern\n     */\n    static getInstance(): ProductsState {\n        if (!ProductsState.instance) {\n            ProductsState.instance = new ProductsState();\n        }\n\n        return ProductsState.instance;\n    }\n}\n"],"file":"products.js"}